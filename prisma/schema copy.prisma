datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  MANAGER
  BRAND
  AFFILIATE
}

model User {
  id             String         @id @default(cuid())
  numId          Int            @default(autoincrement())
  name           String?
  storeName      String?
  address        String?
  phoneNumber    String?
  email          String?        @unique
  emailVerified  DateTime?
  image          String         @default("https://res.cloudinary.com/dqwdfhxgl/image/upload/v1712025676/contacts/mtgn8ph1cyvu5hebxf1x.jpg")
  password       String?
  role           UserRole       @default(AFFILIATE)
  accounts       Account[]
  mediaChannels  MediaChannel[]
  cards          Card[]
  offersAccepted Offer[]        @relation("OffersAcceptedByUser")
  offersCreated  Offer[]        @relation("OffersCreatedByUser")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token]) //only one token for a specific email
}

model MediaChannel {
  id          Int      @id @default(autoincrement())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Restrict)
  name        String
  description String
  image       String   @default("https://res.cloudinary.com/dqwdfhxgl/image/upload/v1715202692/contacts/pev2vhl2tdnfobk6nd74.png")
  subscribers Int
  views       Int
  price       Decimal
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

model Card {
  id             Int      @id @default(autoincrement())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  number         String
  nameOnCard     String
  cvc            String
  expirationDate String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

model Offer {
  id       Int    @id @default(autoincrement())
  authorId String
  author   User   @relation("OffersCreatedByUser", fields: [authorId], references: [id], onDelete: Cascade)

  usersWhoAccepted User[] @relation("OffersAcceptedByUser")

  //isPaid    Boolean  @default(false)//?
  name      String
  brand     String
  price     Decimal
  balance   Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //@@index([userToId])
  @@index([authorId])
}
